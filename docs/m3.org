#+TITLE: Meilenstein 3
#+SUBTITLE: HCI 2021S: Interior Designer
#+AUTHOR: Asım OĞUZ, Dominik PEGLER, Sophia PUM
#+EMAIL: a01468373@unet.univie.ac.at
#+SETUPFILE: setupfile_article.org
\newpage

* Konzept

/Autor: Dominik PEGLER/
** Ziele
Es handelt sich um *keine Augmented-Reality-App*. Wir lesen die
Realität ein und speichern sie für später ab. Anschließend bearbeiten
wir diese Realität, bis wir zum gewünschten Ergebnis kommen. Weil wir
nachhaltige Ergebnisse möchten, können diese nicht im selben Augenblick
entstehen und erarbeitet werden, wenn die Kamera eingeschaltet ist, wie
es bei AR der Fall ist. Durch die Trennung von Scan- und
Entscheidungsprozess sollen aus der Hüfte geschossene Entscheidungen
vermieden und der Nutzer bei einer gut durchdachten Planung unterstützt
werden. Netter Nebeneffekt: Die Kamera muss nur zum Scannen
eingeschaltet werden, das spart Ressourcen.

Aufgrund der kurzen Entwicklungsdauer von wenigen Wochen und der
Unerfahrenheit allerq Teammitglieder im Bereich der
Frontend-Entwicklung kann der vorliegende Prototyp nur eine erste
grobe Skizzierung unserer Vorstellungen von dieser Applikation
sein. Wir sind jedoch zuversichtlich, dass er diese Vorstellungen
bereits gut repräsentiert sowie für Außenstehende klar und
verständlich kommuniziert.

Die für uns wesentlichen Eigenschaften, auf die wir uns in der
Entwicklung konzentrieren wollten, waren das User-Interface und die
Demonstration der beiden Basisfunktionen, nämlich der des Scannens von
Räumen und des Einfügens von virtuellen Objekten in diese folglich
ebenso virtuellen Räumen.
** Screens
Dabei haben wir sechs für das Userinterface und die Basisfunktionen
wichtige Bildschirme definiert, die wir in dieser Arbeit realisieren
wollten, sowie einen zusätzlichen Bildschirm für die
Applikationseinstellungen. Diese sieben "Screens" sind:


1. HomeScreen
2. RoomScanScreen
3. RoomScanConfirmScreen
4. RoomSelectScreen
5. RoomScreen
6. ObjectSelectScreen
7. SettingsScreen (*Abb. ref:fig:SettingsScreen*)
** Navigation

Ihre Funktionen lassen sich am besten durch typische
Navigationsabfolgen beschreiben:

  1. User startet die App, gelangt zum *HomeScreen* (*Abb. ref:fig:HomeScreen*) und findet dort 3
     große Buttons:
     1. Scan New Room
     2. My Rooms
     3. My Objects
        
     #+caption: M3 Prototype: HomeScreen
     #+name: fig:HomeScreen
     #+attr_latex: :height 250px
     file:./img/m3_hifi_homescreen.jpg

     #+caption: M3 Prototype: SettingsScreen
     #+name: fig:SettingsScreen
     #+attr_latex: :height 250px
     file:./img/m3_hifi_settingsscreen.jpg
 
  2. User entschließt sich zum Scannen eines neuen Raumes und tippt
      *"Scan New Room"* an.
     
      #+caption: M3 Prototype: RoomScanScreen (derzeit nur iPhone)
      #+name: fig:RoomScanScreen
      #+attr_latex: :width 250px
      file:./img/m3_hifi_roomscanscreen.jpg

  3. User befindet sich jetzt im *RoomScanScreen* (*Abb. ref:fig:RoomScanScreen*), die Kamera des
     Geräts schaltet sich ein, es erscheinen visuelle Indikatoren, die
     den Scanprozess unterstützen sollen. Die Simulation des
     Scanprozesses dauert im Prototypen etwa 25 Sekunden. Anschließend
     wird der RoomScanScreen geschlossen.
     
        #+caption: M3 Prototype: RoomScanConfirm
        #+name: fig:RoomScanConfirmScreen
        #+attr_latex: :height 250px
        file:./img/m3_hifi_roomscanconfirmscreen.jpg

  4. User ist nun im *RoomScanConfirmScreen* (*Abb. ref:fig:RoomScanConfirmScreen*) angelangt, sieht eine
     Skizze eines Raumes mit Meter- und Quadratmeterangaben vor sich,
     darunter zwei Buttons, mit denen sich das Scanresultat bestätigen
     oder ablehnen lässt. In der fertigen Applikation führt das
     Bestätigen zu einem "Speichern"-Dialog, im Prototypen zurück zum
     HomeScreen. Das Ablehnen führt sowohl in der fertigen App wie
     auch im Prototypen zurück zum HomeScreen.
     
     #+caption: M3 Prototype: RoomSelectScreen
     #+name: fig:RoomSelectScreen
     #+attr_latex: :height 250px
     file:./img/m3_hifi_roomselectscreen.jpg

  5. User befindet sich wieder im *HomeScreen* und wählt dort diesmal *"My Rooms"*
     
  6. Im *RoomSelectScreen* (*Abb. ref:fig:RoomSelectScreen*) wird eine Liste an Räumen angezeigt. Diese
     Liste kann auch durchsucht werden. Als Hilfe werden user auch
     Preview-Bilder der gelisteten Räume angezeigt. Im Unterschied zum
     Prototypen sollen hier auch weitere Details wie Anlagedatum,
     letzte Bearbeitungsdatum angezeigt werden. Außerdem soll es auch
     möglich sein, Kategorien zu bilden und Räume zu löschen,
     umzubenennen oder zu duplizieren (Swipes nach links oder
     rechts). User kann im Prototypen einen Raum auswählen. Wird das
     gemacht, wechselt die App in den nächsten Bildschirm.
  7. User gelangt in den *RoomScreen* (*Abb. ref:fig:RoomScreen*) und findet sich damit im gerade
     ausgewählten Raum wieder. In der fertigen Applikation wird es
     möglich sein, sich im Raum herumzubewegenm verschiedene
     Perspektiven wie Grundrissperspektive einzunehmen und Objekte
     maßgenau manuell oder per Algorithmus anzuorden. Im Prototypen
     wird das mit einem einfachen Bild des Raumes und drei runden
     Buttons simuliert. Ein Button dient dem Hinzufügen von Objekten,
     einer dem Entfernen aller Objekte und ein weiterer speichert das
     Projekt bzw. den Raum in dieser Anordnung ab. Im Prototypen wird
     das Speichern mittels eines Pop-up-Dialogs simuliert. Über den
     Button mit dem Plus-Symbol, der für das Hinzufügen neuer Objekte
     steht, gelangt man in den nächsten Screen.
     
    #+caption: M3 Prototype: RoomScreen
    #+name: fig:RoomScreen
    #+attr_latex: :width 250px
    file:./img/m3_hifi_roomscreen.jpg

  8. User ist im *ObjectSelectScreen* (*Abb. ref:fig:ObjectSelectScreen*). Dieser Screen ähnelt dem
     RoomSelectScreen. Es soll hier eine Art "Bibliothek der Objekten"
     entstehen und Objekte sollen in der fertigen Applikation die
     zentrale Rolle einnehmen. Die Funktionalität des Prototypen
     beschränkt sich jedoch noch auf das Durchsuchen und Auswählen der
     Objekte. Hat user ein solches ausgewählt, führt die Navigation
     zurück in den *RoomScreen* (*Abb. ref:fig:RoomScreen2*) und das Objekt wird mittig im Bild
     platziert.
     
     #+caption: M3 Prototype: ObjectSelectScreen
     #+name: fig:ObjectSelectScreen
     #+attr_latex: :height 250px
     file:./img/m3_hifi_objectselectscreen.jpg

  9. Zuletzt kann user den Raum speichern (*Abb. ref:fig:RoomScreen3*) oder abbrechen. In beiden
     Fällen gelangt man wieder in den *HomeScreen*.

     #+caption: M3 Prototype: RoomScreen (Objekt hinzugefügt)
     #+name: fig:RoomScreen2
     #+attr_latex: :height 250px
     file:./img/m3_hifi_roomscreen_2.jpg

     #+caption: M3 Prototype: RoomScreen (Speicher)
     #+name: fig:RoomScreen3
     #+attr_latex: :height 250px
     file:./img/m3_hifi_roomscreen_3.jpg
* Designentscheidungen
/Autor: Dominik PEGLER/
** Personas
Wir haben darauf Wert gelegt, dass die Applikation minimal gehalten
werden kann, wenig Text und mehr Icons zum Einsatz kommen können, da
man von unseren primären Personas erwarten kann, dass sie ein hohes
Verständnis für moderne Technologien mitbringen und ein Mehr an
Hinweistexten und Navigationsassistenz für sie als störend und das UX
beeinträchtigend empfunden würde. Da unsere Personas relativ dyanmisch
ihre Umwelt gestalten und Wohnortewechsel bei ihnen selbst sowie auch
in ihrem Freundes- und Bekanntenkreis regelmäßig stattfinden können,
gehen wir außerdem davon aus, dass unsere Applikation von ein und
derselben Person häufiger benutzt wird. Vieluser würden sich durch
Features, die den Einstieg in die App zwar erleichtern, aber später
keinen Nutzen mehr bringen, wahrscheinlich in ihrer Zielerreichung,
dem schnellen Zusammenstellen von Raumlösungen, gehindert sehen.
** Farbwahl
Wir haben außerdem versucht, *Farben* so zu verwenden, dass sie durch
Hervorhebung bestimmter Elemente Bedeutung für die Navigation durch
die App haben. Daher wollten wir Farben überall dort vermeiden, wo sie
keinen wirklichen Zusatznutzen bringt oder sogar der Usability im Weg
steht.

Die App soll auch eine Akzentfarbe enthalten, die der App Identität
verleiht. In Statusleisten, Logos und Menüs verwenden wir diese. Wir
haben hier die Farbe Dunkelgrün gewählt, um eine Farbe zu verwenden,
die Natur und Natürlichkeit symbolisiert und eine jüngere Generation
in Form unserer Personas anspricht, die dem Thema Umweltschutz und
Nachhaltigkeit stärker emotional verbunden ist. Im weieren Verlauf der
Entwicklung soll diese Thematik stärker herausgearbeitet werden und so
auch eine stärkere Abgrenzung zu Konkurrenzprodukten stattfinden.

Probleme mit Rot-Grün-Kontrasten wollen wir vermeiden, indem wir
diesen im Falle von Confirm-Decline-Situationen auch noch passende
Icons zur Seite stellen. Die Farben sind hier angeführt:

- Appfarbe/Akzentfarbe: Farbe A

- Hintergrundfarbe: Weiß: #ffffff

- Hauptfarben: ca. 4 Farben 

  - Farbe A (dunkelgrün): #303E14
    #+html: <span style="color:#303E14;">██████████</span>
    
  - Farbe B (rot / decline / cancel / danger): #ff9999
    #+html: <span style="color:#ff9999;">██████████</span>
    
  - Farbe C (grün / accept / okay): #8cd9b3
    #+html: <span style="color:#8cd9b3;">██████████</span>
    
  - Farbe D (gelb / extra features): #d9d98c
    #+html: <span style="color:#d9d98c;">██████████</span>
** Konsistenz
*App-Komponenten*: konsistentes Design Components aus nur möglichst
einer Library verwenden. Wo möglich haben wir Komponenten aus der
Library "React Native Elements" und Icons von "FontAwesome" verwendet.

#+caption: Beispiel-Components react-native-elements: /Solid/, /Clear/, /Outline/
#+attr_latex: :width 300px 
[[file:./img/react-elements_components.png]]

* Projektmanagement
/Autor: Dominik PEGLER/

Es wurden auf github für das Projekt eine Organisation mit den drei
Mitgliedern sowie ein Repository für die App und ein weiteres für die
Projektdokumentation angelegt. Die Programmieraufgaben werden so
verteilt, dass die Personen möglichst unabhängig voneinander arbeiten
können. Den Zwischenstand des geschriebenen Codes
(z.B. "HomeScreen.js") laden Sophia und Asım zumindest einmal am Tag
in den GoogleDrive-Folder des Projekts oder direkt in eigenen Branch
auf Github. Von dort wird der Code wenn funktionstauglich von Dominik
in Branch "main" übernommen. Ziel dabei ist, dass Main-Branch immer
eine funktionstaugliche App ohne Fehler oder Warnungen enthält.

** Aufgabenverteilung:

(siehe Anhang)

* noexport                                                         :noexport:

** Local functions                                        :noexport:
  :PROPERTIES:
  :EXPORT_TITLE: Annotated Bibliography Template
  :EXPORT_OPTIONS: tags:nil todo:nil
  :END:
*** User Entities
The following source code block sets up user entities that are used frequently
in my work. I use the various =.*macron= commands to typeset Hawaiian
language words with what is known in Hawaiian as a /kahak\omacron{}/.

The =space= entity is useful following a period that doesn't end a
sentence. LaTeX sets a space slightly longer than an inter-word space
following a sentence ending period. The =space= entity lets LaTeX know
to set an inter-word space.

#+name: user-entities
#+begin_src emacs-lisp
  (setq org-entities-user nil)
  (add-to-list 'org-entities-user '("space" "\\ " nil " " " " " " "–"))
  (add-to-list 'org-entities-user '("amacron" "\\={a}" nil "&#0257" "a" "a" "ā"))
  (add-to-list 'org-entities-user '("emacron" "\\={e}" nil "&#0275" "e" "e" "ē"))
  (add-to-list 'org-entities-user '("imacron" "\\={\\i}" nil "&#0299" "i" "i" "ī"))
  (add-to-list 'org-entities-user '("omacron" "\\={o}" nil "&#0333" "o" "o" "ō"))
  (add-to-list 'org-entities-user '("umacron" "\\={u}" nil "&#0363" "u" "u" "ū"))
  (add-to-list 'org-entities-user '("Amacron" "\\={A}" nil "&#0256" "A" "A" "Ā"))
  (add-to-list 'org-entities-user '("Emacron" "\\={E}" nil "&#0274" "E" "E" "Ē"))
  (add-to-list 'org-entities-user '("Imacron" "\\={I}" nil "&#0298" "I" "I" "Ī"))
  (add-to-list 'org-entities-user '("Omacron" "\\={O}" nil "&#0332" "O" "O" "Ō"))
  (add-to-list 'org-entities-user '("Umacron" "\\={U}" nil "&#0362" "U" "U" "Ū"))
#+end_src
*** LaTeX Process
The Org mode variable =org-latex-pdf-process= holds a list of strings,
each of which is run as a shell command. Typically, several commands
are needed to process a LaTeX document to produce pdf output. The
following two source code blocks use a straightforward approach that
should work in most cases. The source code block named
[[set-pdf-process-bibtex][set-pdf-process-bibtex]] uses [[http://www.bibtex.org/Using/][BibTeX]] to process the bibliography. BibTeX
has been a standard for many years in the LaTeX world. The source code
block named [[set-pdf-process-biber][set-pdf-process-biber]] uses a newer bibliography processor
named [[http://biblatex-biber.sourceforge.net/][Biber]], which is designed to work with [[http://www.ctan.org/pkg/biblatex][BibLaTeX]].  The choice of
which one to use must be reflected in the =usepackage= command for
BibLaTeX at the top of this file; the optional command =backend= takes
either =bibtex= or =biber= as its value.

At a practical level, perhaps the main difference between Biber and
BibTeX is how they handle special characters. The bibliographic
database for BibTeX uses LaTeX commands for special characters while
the database for Biber uses UTF-8 characters.

#+name: set-pdf-process-bibtex
#+header: :results silent
#+begin_src emacs-lisp
  (setq org-latex-pdf-process
        '("pdflatex -interaction nonstopmode -output-directory %o %f"
          "bibtex %b"
          "pdflatex -interaction nonstopmode -output-directory %o %f"
          "pdflatex -interaction nonstopmode -output-directory %o %f"))
#+end_src

#+name: set-pdf-process-biber
#+header: :results silent
#+begin_src emacs-lisp
  (setq org-latex-pdf-process
        '("pdflatex -interaction nonstopmode -output-directory %o %f"
          "biber %b"
          "pdflatex -interaction nonstopmode -output-directory %o %f"
          "pdflatex -interaction nonstopmode -output-directory %o %f"))
#+end_src


*** Cite Link
:PROPERTIES:
:ARCHIVE_TIME: 2021-02-06 Sat 21:11
:ARCHIVE_FILE: ~/Dropbox/org/mindfulness_lit.org
:ARCHIVE_OLPATH: TODOS
:ARCHIVE_CATEGORY: fls-article
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: noexport
:END:
There are many ways to manage citations in Org mode. My preference is
to manage the bibliography database with [[http://joostkremers.github.io/ebib/][Ebib: a BibTeX database
manager for Emacs]] and insert citations using a custom Org mode link. I
find the work flow convenient and the look of the Org mode buffer
"good enough."

The source code block named [[ebib-setup][ebib-setup]] defines a cite command that
[[http://joostkremers.github.io/ebib/][Ebib]] will use to insert citations in an Org mode buffer. It inserts
the BibTeX key as the path part of the link and then offers the user
three prompts to enter strings separated by semi-colons as the
description part of the link. The first of these typically holds a
page number, the second holds a string that appears before the in-text
citation (typically, something like "e.g.,"), and the third is the
description of the citation visible in the Org mode buffer.

The source code block named [[define-biblatex-cite-link][define-biblatex-cite-link]] defines an Org
mode link type that parses the link inserted by [[http://joostkremers.github.io/ebib/][Ebib]] and outputs a
correctly formatted LaTeX citation. In theory, it is possible also to
export correctly formatted citations to other backends, but the link
type defined here doesn't do that. The html export simply sandwiches
the BibTeX key between =<cite>= tags and is included here as a
placeholder for future development.

#+name: ebib-setup
#+begin_src emacs-lisp
  (setq ebib-citation-commands
        (quote ((any (("cite" "\\cite%<[%A]%>{%K}")))
                (org-mode (("cite" "[[cite:%K][%A;%A;%A]]"))))))
#+end_src

#+name: define-biblatex-cite-link
#+begin_src emacs-lisp :results silent
  (org-add-link-type 
   "cite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'html)
       (format "(<cite>%s</cite>)" path))
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "cite:" desc)))
           (format "\\cite{%s}" path)
         (format "\\cite[%s][%s]{%s}"
                 (cadr (split-string desc ";"))
                 (car (split-string desc ";"))  path))))))
#+end_src

*** Koma Article
:PROPERTIES:
:ARCHIVE_TIME: 2021-02-06 Sat 21:10
:ARCHIVE_FILE: ~/Dropbox/org/mindfulness_lit.org
:ARCHIVE_OLPATH: TODOS
:ARCHIVE_CATEGORY: fls-article
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: noexport
:END:
The following two source code blocks set up a LaTeX class named
=koma-article= that is referenced near the top of the file. The
=koma-article= class is based on the [[http://www.ctan.org/pkg/koma-script][Koma script]] article class
=scrartcl=, which uses a sans-serif font for headings and a serif font
for body text.

The =koma-article= class uses fonts from the [[http://www.gust.org.pl/projects/e-foundry/tex-gyre/][TeX Gyre collection of
fonts]]. As explained in [[http://www.gust.org.pl/projects/e-foundry/tex-gyre/tb87hagen-gyre.pdf][The New Font Project: TeX Gyre]], a goal of the
project was to produce good quality fonts with diacritical characters
sufficient to cover all European languages as well as Vietnamese and
Navajo. 

The source code block named [[koma-article-times][koma-article-times]] is based on the Times
Roman font. The serif Termes font is a replacement for Times Roman,
the sans-serif Heros font is a replacement for Helvetica, and the
typewriter Cursor font is a replacement for Courier. The source code
block named [[koma-article-palatino][koma-article-palatino]] is based on the beautiful Palatino
font designed by Hermann Zapf. The Pagella font is the TeX Gyre
replacement for Palatino. Typographers often recommend that
linespacing be increased slightly with Palatino, and this has been
achieved with the addition of the =linespacing= command.

The Tex Gyre fonts benefit from the [[http://ctan.org/tex-archive/macros/latex/contrib/microtype][microtype package]], which provides
"subliminal refinements towards typographical perfection," including
"character protrusion and font expansion, furthermore the adjustment
of inter-word spacing and additional kerning, as well as hyphenatable
letter spacing (tracking) and the possibility to disable all or
selected ligatures."

In addition, the [[http://www.ctan.org/tex-archive/macros/latex/contrib/paralist/][paralist package]] is used for its compact versions of
the LaTeX list environments.

Finally, the =newcommand= is provided merely as an illustration of one
way to move LaTeX declarations out of the Org file header. This one is
useful in my work as an archaeologist and over the years it has crept
into my BibTeX database. It shouldn't interfere with your work, but
you might want to remove it or replace it with LaTeX commands that you
do frequently use.

#+name: koma-article-times
#+header: :results silent
#+begin_src emacs-lisp
   (require 'ox-latex)
   (add-to-list 'org-latex-classes
                '("koma-article"
                  "\\documentclass{scrartcl}
                   \\usepackage{microtype}
                   \\usepackage{tgtermes}
                   \\usepackage[scale=.9]{tgheros}
                   \\usepackage{tgcursor}
                   \\usepackage{paralist}
                   \\newcommand{\\rc}{$^{14}C$}"
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

#+name: koma-article-palatino
#+header: :results silent
#+begin_src emacs-lisp
   (require 'ox-latex)
   (add-to-list 'org-latex-classes
                '("koma-article"
                  "\\documentclass{scrartcl}
                   \\usepackage{microtype}
                   \\usepackage{tgpagella}
                   \\usepackage[scale=.9]{tgheros}
                   \\usepackage{tgcursor}
                   \\usepackage{paralist}
                   \\newcommand{\\rc}{$^{14}C$}"
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

*** Local variables                                              :noexport:
:PROPERTIES:
:ARCHIVE_TIME: 2021-02-06 Sat 21:10
:ARCHIVE_FILE: ~/Dropbox/org/mindfulness_lit.org
:ARCHIVE_OLPATH: TODOS
:ARCHIVE_CATEGORY: fls-article
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: noexport
:END:

befinden sich ganz am Ende des Dokuments (Fußnoten)

* Footnotes

# Local Variables: 
# eval: (and (fboundp 'org-sbe) (not (fboundp 'sbe)) (fset 'sbe 'org-sbe))
# eval: (sbe "koma-article-palatino")
# eval: (sbe "user-entities")
# eval: (sbe "set-pdf-process-biber")
# eval: (sbe "ebib-setup")
# eval: (sbe "define-biblatex-cite-link")
# End:
